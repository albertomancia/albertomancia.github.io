<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-20T01:35:11-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Alberto Mancia</title><subtitle>Artist and other things</subtitle><entry><title type="html">Marching Waves</title><link href="http://localhost:4000/marching-waves/" rel="alternate" type="text/html" title="Marching Waves" /><published>2023-12-15T14:29:27-08:00</published><updated>2023-12-15T14:29:27-08:00</updated><id>http://localhost:4000/marching-waves</id><content type="html" xml:base="http://localhost:4000/marching-waves/"><![CDATA[<p>My signature art style and how it’s made.</p>

<h2 id="the-style">The Style</h2>

<p>In January of 2018, I developed a new art style using gel pens, printer paper, and a lightbox for tracing. I printed out images in black and white, taped another piece of paper on top, shined a light through from underneath, and got to tracing. I made these:</p>

<p align="center">
  <img src="/assets/marching-waves/portrait.png" width="full" />
  <img src="/assets/marching-waves/ellie.png" width="full/2" />
</p>

<p>I still look to these pieces all the time for inspiration, but they were exhausting to make. Each took several hours to draw, hunched over a desk and slowly laying down one line at a time. I would certainly not be making anything larger than a standard sheet of paper using this method.</p>

<h2 id="going-digital">Going Digital</h2>

<p>Later that year I started learning to code with <a href="https://processing.org">Processing</a>, a programming language made by and for artists. My work quickly focused on the art of image rendering, of filters and halftoning patterns, ways of reconstructing an image from a given set of geometric and chromatic constraints.</p>

<p>It wasn’t long before I started thinking about how to replicate my drawing style in Processing. If I could do that, I could use a pen plotter to make pieces as large and intricate as I like without having to draw them by hand. The prospect was exciting of course, but I also had the feeling that it would be impossible.</p>

<p>I started making attempts in late 2019, once I felt good enough at coding to give it a shot. I probably was, but my attempts went in the wrong direction. I tried to re-create the process too literally, making a virtual pen trace out each line. I’d been ignoring what was obvious to myself and many other people I had talked to — this style is a mathematical function.</p>

<h2 id="the-math">The Math</h2>

<p>Someone fresh out of multivariable calculus might look at these drawings and write something like this:</p>

<p>$$ |\nabla u(x,y)| = f(x,y) $$</p>

<p>If each drawing is a topographical map, $u(x,y)$ defines the terrain that’s being sliced to create it. The slices bunch up where the terrain is steepest, and spread out where it’s more shallow. This density is what creates the halftone effect, so the steepness of $u$’s surface must be controlled by the darkness of the desired image. We define the function $f(x,y)$ as that measured darkness, so in plain English our equation is:</p>

<p>“The slope of $u(x,y)$ at any given point $(x,y)$ is defined by the value of $f(x,y)$ at that point”</p>

<p>If you look back at the drawings, this equation can clearly be seen as the rule I was unknowingly following. The problem was solving it, and I had no ideas on how to even begin.</p>

<p>I got unstuck by pure chance in the Summer of 2020: I finally found the name of the equation I was trying to solve. I’ll admit that given how long it took me to stumble upon this name, and how crucial it was, it feels weird to just give it away. Anyway, it’s the <a href="https://en.wikipedia.org/wiki/Eikonal_equation">Eikonal Equation</a>.</p>

<h2 id="the-algorithm">The Algorithm</h2>

<p>That Wikipedia article was the initial gateway to making my program, but there was a long road ahead — I was working right at the edge of my abilities as a mathematician and a programmer. Even writing out what the algorithm had to do, before any coding could begin, took the better part of a week. I’ll try to summarize it in a paragraph or two, but don’t get your hopes up.</p>

<p>Computers need to interpret smooth, continuous functions as measured points on a discrete grid (in this case, the pixel grid of the canvas).  Rather than taking derivatives as we would on paper, they just directly measure the slope near a given point (which is just as well, because the Eikonal Equation has no closed-form solution anyway). We can sample the image at every pixel $(x,y)$ to get our $f(x,y)$ at each grid point, and assuming we know the (lowest) values $U_X ,U_Y$ of $u$ at the neighboring points in each direction, our equation can be written as:</p>

<p>$$ \sqrt{\left(U_{ij} - U_X\right)^2 + \left(U_{ij} - U_Y\right)^2} = f_{ij} $$</p>

<p>Where $U_{ij}$  is the value of $u$ at pixel $(i,j)$. We measure slope by subtracting the values of neighboring points, and then take the Euclidean norm to get $|\nabla u(x,y)|$. Feel free to grab a beer and spend an afternoon solving this; otherwise you’ll just have to trust me when I say that the solution is:</p>

<p>$$ U_{ij} = \frac{U_X + U_Y}{2} + \frac{1}{2}\sqrt{\left(U_X+U_Y\right)^2 - 2 \left(U_X^2 + U_Y^2 - f_{ij}^2 \right)} $$</p>

<p>Great! We have the closest thing to a closed-form solution. And it’s so pretty. Problem is, it relies on already knowing the value of $u$ for at least one neighboring point. This makes sense in a way — you can imagine the contour lines as waves rippling out across the canvas from one point or direction. Changes in their shape early on will affect the shape they take later. Since one part of the domain can have such an effect on the other, it becomes more clear why there is no closed-form solution. This long chain of cause-and effect is why there is no way to solve this equation everywhere all at once.</p>

<p>This is where James Sethian’s <a href="https://math.berkeley.edu/~sethian/2006/Explanations/fast_marching_explain.html">Fast Marching Method</a> comes in. It’s an algorithm that takes a set of points with known values, which I call the origin, and builds the solution out from them one point at a time. If you’re familiar with Dijkstra’s Algorithm, you’ll be able to see the third interpretation of this equation’s solution: the path-distance of each point from the origin, where $f$ is affecting the speed of travel. You can see it in this old map:</p>

<p align="center">
  <figure>
    <img src="/assets/marching-waves/map.png" />
  </figure>
  <p></p>
  <figcaption>
    Here New York is the origin, and each line represents all the points with a given path-distance, accounting for terrain and modes of travel.
  </figcaption>
  <p></p>
</p>

<p>Fast Marching is basically Dijkstra’s Algorithm, using the expression from before as its method of measuring path-distance. And once we’ve implemented it, we can solve the equation! This is the very heart of the program (I only operate on it when something has gone horribly wrong). To make it usable, we need an interface with which to make and export designs.</p>

<h2 id="the-interface">The Interface</h2>

<p>Making the interface I use to try out ideas and export designs has been a continous process. I tinker with it and add features whenever I need it to do something new, or when I’m not happy with the results. It’s changed a lot over the years, but here’s what it currently looks like:</p>

<div class="video-mask" style="aspect-ratio: 0.96">
  <video src="/assets/marching-waves/demo.mp4" autoplay="" loop=""></video>
</div>
<figcaption>
  It took a lot of time to make the contour lines render in real-time as the solution expands. 
</figcaption>
<p></p>

<p>Pre-processing happens in Photoshop. The background is masked out in blue, which tells the program what regions to ignore. The subject is in grayscale, and red gives the origin set — the pixels with a known solution (zero) from which the solution for the rest of the domain can be grown. The red can be drawn in the program to try out ideas quickly, or added during pre-processing for more precision.</p>

<p>Once the solution is complete, the contour lines can be exported as a vector file, ready for any cutting or drawing machine. I used <a href="https://en.wikipedia.org/wiki/Marching_squares">Marching Squares</a> to draw the contours, and a custom sorting algorithm to join all the tiny line segments into continous paths.</p>

<p>That part alone took as long as getting the thing working in the first place. But once it was completed, all I had to do was send finished designs to a pen plotter and watch it draw designs as big and detailed as I wanted. Finally, I thought, now comes the easy part.</p>

<h2 id="manufacturing">Manufacturing</h2>

<p>Everything described thus far took about 5% as long as it took to actually develop the manufacturing process.</p>

<p align="center">
  <img src="/assets/marching-waves/plotting.gif" width="full" />
</p>

<p>Once I had the program working, I tried and failed to get good results from my cheap desktop plotter. With no other resources at my disposal, I gave up on this project for the time being. When UCLA resumed in-person classes a year later, I started my favorite job again: working at the residential makerspace. Somewhere in the middle of Fall quarter, I realized that our huge vinyl cutter was the perfect machine to make the art pieces I had been dreaming of. And so, from October 2021 to May 2022, I spent every weekend and most weekdays hunched over our Roland GR-420 vinyl cutter.</p>

<p align="center">
  <figure>
    <img src="/assets/marching-waves/cutter.png" />
    <!-- <img src="/assets/marching-waves/cutter.png" style="max-width: 90%; padding-left: 5%"> -->
  </figure>
  <p></p>
  <figcaption>
    Here you can see one of the first problems I ran into: the middle roller was smearing ink up and down the piece. I spent several weeks trying to mitigate this problem physically before finding out you can just turn off the roller in settings.
  </figcaption>
  <p></p>
</p>

<p>Normally this machine takes rolls of vinyl up to 42 inches wide and cuts them with a drag knife. Replace vinyl with paper and knife with pen, and you have a giant plotter. It was not only much larger, but much more precise than the one I had at home. On more detailed pieces, a line being off by even a tenth of a millimeter can cause visible banding. This machine would draw all across the paper for hours, laying down literal miles of lines, and never drift by even that much. For its intended purpose it had no reason to be capable of doing this, but it was.</p>

<p>When I started working with the Roland, I would’ve been appalled at the idea of writing this article — I had long been afraid of other people stealing my source code and replicating my pieces. Seven months of work later, I was no longer worried. The additional knowledge required to get the results I want on paper exists only in my head, and I acquired it by going far past the point where any sane person would’ve given up.</p>

<p>With no existing reference available, I had to push through very specific and unprecedented problems with ink flow, smearing, paper movement, acceleration curves, anti-aliasing… the list goes on. At the moment, the only way to find the solutions to them is through months of trial-and-error. Those are the secrets I will keep for now.</p>

<p>The technique has progressed only in small ways since then. In March 2023 I discovered a fundamental math error while writing the first draft of this article. I did some heart surgery on the program and saw a significant difference in the resulting patterns. I’m not sure if I like it more. We’ll have to see.</p>

<h2 id="gallery">Gallery</h2>

<p>Here are some of the pieces I made in 2021 and 2022:</p>

<p align="center">
  <img src="/assets/marching-waves/shades1.png" width="full" />
  <img src="/assets/marching-waves/shades2.png" width="full" />
  <img src="/assets/marching-waves/shades3.png" width="full" />

  <img src="/assets/marching-waves/hand1.png" width="full" />
  <img src="/assets/marching-waves/hand2.png" width="full" />
  <img src="/assets/marching-waves/nipsey1.png" width="full" />
  <img src="/assets/marching-waves/nipsey2.png" width="full" />
  <img src="/assets/marching-waves/nipsey3.png" width="full" />
</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[My signature art style and how it’s made.]]></summary></entry><entry><title type="html">Who is this?</title><link href="http://localhost:4000/who-is-this/" rel="alternate" type="text/html" title="Who is this?" /><published>2023-12-15T14:29:27-08:00</published><updated>2023-12-15T14:29:27-08:00</updated><id>http://localhost:4000/who-is-this</id><content type="html" xml:base="http://localhost:4000/who-is-this/"><![CDATA[<p align="center">
    <img src="/assets/who-is-this/thumbnail.png" />
</p>

<p>This has been my standard test photo since I first used it for a <a href="/marching-waves/">Marching Waves</a> test piece in 2021. I use it to test every new image processing program I write, and I recently made another piece with it using <a href="/indigo/">indigo</a>.</p>

<p>This is my friend <a href="https://mirandamarquez.es">Miranda</a>! She’s a very accomplished creative coder, fashion designer, model, and now tattoo artist. She gave me my first tattoo:</p>

<p align="center">
    <img src="/assets/who-is-this/1.png" />
</p>

<p>If you’re in Barcelona and you want a tattoo, definitely hit her up.</p>]]></content><author><name></name></author><category term="articles" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Halftoning</title><link href="http://localhost:4000/halftoning/" rel="alternate" type="text/html" title="Halftoning" /><published>2023-12-14T14:29:27-08:00</published><updated>2023-12-14T14:29:27-08:00</updated><id>http://localhost:4000/halftoning</id><content type="html" xml:base="http://localhost:4000/halftoning/"><![CDATA[<p>I don’t work with color a lot. I’m not a painter or a photographer. My pieces don’t express through paint, toner, or anything that can be blended to produce different shades. The machines I work with — pen plotters, embroidery machines, laser cutters, etc. — can visually express only through the presence or absence of their touch on the workpiece. Every point on the piece is marked by the pen, needle, or laser or it’s not. There’s no in between, it’s black or white, 1 or 0.</p>

<h2 id="halftoning">Halftoning</h2>

<p>Creating the illusion of gray through these limiting black-and-white processes is known as halftoning, and it’s usually done on the microscopic level — you have to zoom way in on a newspaper to see the little dots of ink that all blur into one color from afar.</p>

<p align="center">
  <figure>
    <img src="/assets/halftoning/eye.png" />
  </figure>
  <p></p>
  <figcaption>
    Only one color of ink is used to render Lincoln's eye on this five dollar bill — the pattern of the ink creates the illusion of different shades of gray.
  </figcaption>
  <p></p>
</p>

<p>Once an image has been processed in this way, it can be printed in all sorts of ways. A laser cutter could make a stencil for it, or engrave linoleum to make a printing block. If the pattern is made up of uniform lines like in <a href="/marching-waves/">Marching Waves</a>, a pen plotter or embroidery machine could follow the paths. I see these processes as a way of being freed from the traditional printer, to explore new and interesting forms of computerized printing.</p>

<h2 id="the-old-way">The Old Way</h2>

<p>Even before I started working with machines, my first projects in Processing were halftoning effects like this one:</p>

<p align="center">
  <img src="/assets/halftoning/dots.png" />
</p>

<p>This one’s easy enough to program: make a grid of circles, where each circle expands and contracts depending on the brightness of the pixels beneath it. In addition to expanding circles, you can define all kinds of dynamic shapes that expand to fill a space:</p>

<p align="center">
  <img src="/assets/halftoning/demo.gif" />
</p>

<p>You can also define bars or concentric rings that expand and contract:</p>

<p align="center">
  <img src="/assets/halftoning/shadeshalftone2.png" />
</p>

<p>Defining these shapes becomes complicated very quickly, though. What if you wanted to make a Voronoi diagram where each cell is its own dynamic shape?</p>

<p align="center">
  <img src="/assets/halftoning/shadeshalftoneVoronoi.png" />
</p>

<p>I’m sure it’s possible to do this geometrically, but it would be an enormous pain. Thankfully I was introduced to a completely different method used by Photoshop artists. This is a raster method — it deals with pixels, not paths.</p>

<h2 id="the-new-way">The New Way</h2>

<p>It relies on a simple threshold operation. On its own, this will give you something workable:</p>

<p align="center">
  <img src="/assets/halftoning/threshold.png" />
</p>

<p>You’ll see this effect (also called “posterizing”) used to make stencils and such, but it’s boring and loses a lot of information. You don’t get the illusion of gray. This is why halftoning was invented, of course.</p>

<p>But if you modulate the image with a certain pattern before running it through the threshold operation, like this:</p>

<p align="center">
  <img src="/assets/halftoning/modulated.png" />
</p>

<p>what you’ve essentially done is offset the threshold that is actually applied to each pixel. You can do this literally by sampling the pattern as a separate image — a map of what threshold to apply to each pixel — but this method is equivalent and works in Photoshop as well as in code. Now when you apply the threshold, you get this:</p>

<p align="center">
  <figure>
    <img src="/assets/halftoning/wavy.png" />
  </figure>
  <p></p>
  <figcaption>
    I cannot begin to describe how difficult it would be to define these shapes geometrically.
  </figcaption>
  <p></p>
</p>

<p>Now we’re cooking. The task has been shifted: instead of painstakingly defining how we want our shapes to behave, we just have to make a grayscale “threshold map” that will generate these shapes. Here are the ones I’ve used so far:</p>

<p align="center">
    <!-- <img src="/assets/halftoning/dotsMap.png" style="width: 49%; padding: 0px; padding-bottom: 5px;">
    <img src="/assets/halftoning/stripesMap.png" style="width: 49%; padding: 0px; padding-bottom: 5px;">
    <img src="/assets/halftoning/voronoiMap.png" style="width: 49%; padding: 0px; padding-bottom: 20px;">
    <img src="/assets/halftoning/wavyMap.png" style="width: 49%; padding: 0px; padding-bottom: 20px"> -->
  <figure>
    <img src="/assets/halftoning/maps.png" />
  </figure>
  <p></p>
  <figcaption>
    The first two are patterns made in Illustrator with a blur applied, the last two were made by programs I wrote for this purpose. Note that in practice, these do not contain any black. They fade from white to transparent, masking the image beneath.
  </figcaption>
  <p></p>
</p>

<p>As a bonus, we have a method perfectly suited for real-time processing with GLSL. Once a threshold map is made, it can be used to make a live camera effect for Instagram or TikTok. This means I can actually compose a piece in-camera if I want to.</p>]]></content><author><name></name></author><category term="articles" /><summary type="html"><![CDATA[I don’t work with color a lot. I’m not a painter or a photographer. My pieces don’t express through paint, toner, or anything that can be blended to produce different shades. The machines I work with — pen plotters, embroidery machines, laser cutters, etc. — can visually express only through the presence or absence of their touch on the workpiece. Every point on the piece is marked by the pen, needle, or laser or it’s not. There’s no in between, it’s black or white, 1 or 0.]]></summary></entry><entry><title type="html">Light Mirror</title><link href="http://localhost:4000/light-mirror/" rel="alternate" type="text/html" title="Light Mirror" /><published>2023-12-14T14:29:27-08:00</published><updated>2023-12-14T14:29:27-08:00</updated><id>http://localhost:4000/light-mirror</id><content type="html" xml:base="http://localhost:4000/light-mirror/"><![CDATA[<div class="video-mask" style="max-width: 70%; margin-left: 15%; aspect-ratio: 0.6">
  <video src="/assets/light-mirror/44.mp4" autoplay="" loop="" muted=""></video>
</div>
<figcaption>
  This caption originally read "Didn't want to make you wait", but videos are taking forever to load and I don't know how to fix that so you are going to be waiting either way :(
</figcaption>
<p></p>

<h2 id="the-concept">The Concept</h2>

<p>My first software projects were webcam filters — interactive sketches that invite the viewer to interact with them. This was already a well-traveled path, with artists like Danny Rozin and Breakfast Studio using depth-sensing cameras to extract a simple silhouette of the user in all lighting conditions.</p>

<p>These kinds of installations are quite popular, but I saw potential for one that brings the audience even closer by creating a 1-to-1 image — as in, you can hold your hand right up to the piece and see its silhouette right on the other side of the imaginary glass, as if it were a shadow cast by the setting sun.</p>

<h2 id="the-tech">The Tech</h2>

<p>The sensor of choice is an Xbox Kinect sensor. The Kinect v2 is massively over-engineered for its original purpose as an Xbox accessory. It’s equipped with a time-of-flight depth sensing camera, where the Kinect v1 and most other sensors such as Intel RealSense cameras use stereoscopic cameras or dot projectors to gather data.</p>

<p>The working principle of this sensor is that the speed of light is used to measure distance. A blaster next to the camera sends out pulses of infared light, and the camera can measure, for each pixel, how long it took for the pulse to be reflected back. Thus each pixel creates a point in 3D space, and the camera’s entire view generates a point cloud.</p>

<p align="center">
  <figure>
    <img src="/assets/light-mirror/49.png" />
  </figure>
  <p></p>
  <figcaption>
    The point cloud being shown for calibration.
  </figcaption>
  <p></p>
</p>

<p>Each point is given as a vector, and has to be put through a series of transformations to get the point cloud aligned with the physical position of the display. The sensors are turned exactly 45 degrees inwards, so you need to multiply each vector with a rotation matrix. Then they have to be scaled in two directions because you’re not supposed to be doing this so why would they make the point cloud not distorted. Then you have to move in the x and y directions until you’re facing your own silhouette. With the point cloud aligned to the physical position of the display, I removed the z-component to orthographically project it onto a 2D surface. Add some styling and you have this:</p>

<div class="video-mask" style="max-width: 50%; margin-left: 25%; aspect-ratio: 0.6">
  <video src="/assets/light-mirror/48.mp4" autoplay="" loop="" muted=""></video>
</div>

<h2 id="the-display">The Display</h2>

<p>The projector was a necessity — I wanted to make a real display of course, but building one  large enough was out of my budget. The project was shelved until I transfered to UCLA and started hanging out at the Makerspace. I noticed that they had a lot of NeoPixel strips — about 100 meters, worth a few thousand dollars. I asked some version of “can I use basically all of these to make this project?”, and was asked some version of “what else do you need?”.</p>

<p>I built a 45x60 pixel display, 1.5 meters wide with 2 meter strips running vertically. The LEDs came in 5-meter reels, so nine of the strips had to be spliced together from the remaining 1-meter sections. Data and power each required two leads per strip, for a total of 180 solder connections. I used the discontinued FadeCandy controllers, which each came with 8 pins. I wanted each 2-meter strip to have its own pin, so 6 boards in total were used. In hindsight, this was overkill — the display could be driven at well over 60 hertz using one board, if the strips were wired sequentially into 5 or more sections each driven by one pin. But driving them all in parallel was cleaner and made the system more reliable, at least.</p>

<p>[Wiring]</p>

<p>The first version of the display had a wood frame, with elastic holding the strips in place. It worked well enough, but the strips would constantly get pulled loose or start slipping out under their own weight and have to be tightened again. All of the electronics including the computer that drove this setup were mounted on a sandwich of laser-cut acrylic, with 3D printed standoffs holding the two pieces apart:</p>

<p align="center">
  <figure>
    <img src="/assets/light-mirror/1.png" />
  </figure>
  <p></p>
  <figcaption>
    The inside of the enclosure, containing all of the messy cords and Kinect adapters. When it's assembled the power supply and computer are mounted on top of this with another acrylic sheet.
  </figcaption>
  <p></p>
</p>

<p>I recently built a new display out of aluminum extrusion, assembled with M5 screws in blind joints. This one has wheels and, more importantly, fixed arms that hold the sensors out to each side. The sensors were on tripods before, and I had to calibrate for their positions every single setup.</p>

<p align="center">
  <img src="/assets/light-mirror/6.png" />
</p>

<h2 id="the-software">The Software</h2>

<p>The ideal version of this piece would be a display where each pixel has a depth sensor looking straight out, so that each pixel can see and respond to objects within its “column”. You can picture it as an array of laser beams, and the ones that are broken create the silhouette of the subject.</p>

<p>However, placing a suitable time-of-flight sensor on each pixel would increase the cost by an order of magnitude. So I stuck with the Kinect sensors and worked backwards from this ideal form to write the software. The final image displayed on the 45x60 panel is essentially a 2D histogram of the point cloud: each pixel has its own square tube projecting out from it, and all of the points that get caught in that tube are added to its bucket.</p>

<p>[More Cloud]</p>

<p>Note that in this configuration, the histogram is represented by the brightness of each pixel, not the hue. The hue is mapped to the minimum distance of points in the tube, thus simulating the distance measurement that an individual time-of-flight sensor would gather.</p>

<h2 id="gallery">Gallery</h2>

<p align="center">
  <img src="/assets/light-mirror/35.png" />
  <img src="/assets/light-mirror/46.png" />
  <img src="/assets/light-mirror/45.png" />
</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This caption originally read "Didn't want to make you wait", but videos are taking forever to load and I don't know how to fix that so you are going to be waiting either way :(]]></summary></entry><entry><title type="html">Embroidery</title><link href="http://localhost:4000/embroidery/" rel="alternate" type="text/html" title="Embroidery" /><published>2023-12-13T14:29:27-08:00</published><updated>2023-12-13T14:29:27-08:00</updated><id>http://localhost:4000/embroidery</id><content type="html" xml:base="http://localhost:4000/embroidery/"><![CDATA[<p>Getting to work with an embroidery machine is a deep lesson in working within a limited creative space. Its main constraints are color and continuity; changing threads is a pain and not something you want to do often. It can cut threads on its own, but this takes time and leaves loose ends than all need to be trimmed.</p>

<p>These constraints are soft; if you’re willing to dedicate the time, you can make colorful and discontinuous designs. But the challenge of working within them interested me — what’s the best way to render an image using a single continuous thread?</p>

<h2 id="scan-lines">Scan Lines</h2>

<p>The first approach was pretty simple — a classic scan-line halftone pattern, which creates vertical peaks of varying height and separation. In practice it’s cool to see them squish up against each other:</p>

<p align="center">
  <img src="/assets/embroidery/3.png" width="full" />
  <img src="/assets/embroidery/4.png" width="full" />
</p>
<figcaption>
  The grip this album had on me...
</figcaption>
<p></p>

<p>This was one of my first Processing sketches ever, and it’s a perfect beginner project. I encourage you to try it out, especially if you have access to a digital embroidery machine.</p>

<p>The next thing to try was color; a basic CMYK printing technique wouldn’t take too much time. I did this quite manually, extracting the four layers in Photoshop and rotating them before loading them into the sketch.</p>

<p align="center">
  <img src="/assets/embroidery/5.png" width="full" />
  <img src="/assets/embroidery/6.png" width="full" />
</p>
<figcaption>
  Squint real hard.
</figcaption>
<p></p>

<p>If I’d been happier with the results, I might have fully automated the CMYK split, but the effect doesn’t come through unless you back up and really squint. The lines could be made smaller, but there’s another limit; you don’t want to be making a bunch of stitches right next to each other with sub-millimeter spacing.</p>

<p>The other issue is pulling; too many back-and-forth stitches in the same direction will pull the fabric together along that axis. A design with thread going in all directions would solve this, and perhaps solve the issue of detail.</p>

<h2 id="scribbling">Scribbling</h2>

<p>Samer Dabra (<a href="https://www.instagram.com/spongenuity/">@spongenuity</a>) has a procedural, stochastic style originally made for pen plotters. He used it with machine embroidery a few times and it looks fantastic:</p>

<p align="center">
  <img src="/assets/embroidery/hand.png" width="full" />
</p>

<p>It’s pretty easy to program a simple version of this; just make a <a href="https://en.wikipedia.org/wiki/Turtle_graphics">turtle</a> that wanders in the direction of darker areas on the image. To keep it from getting stuck, draw a corresponding white line on the image so it can avoid areas it’s already drawn over.</p>

<p>With a chosen step length, a number of sample points are taken at that distance from the head of the line. The one with the darkest value is where the line goes next.</p>

<p align="center">
  <img src="/assets/embroidery/1.png" width="full" />
</p>

<p>With this simple rule, you can set the turtle loose and watch it go!</p>

<div class="video-mask" style="max-width: 90%; margin-left: 5%;">
  <video src="/assets/embroidery/1.mp4" autoplay="" loop="" muted=""></video>
</div>

<p>After about 20,000 steps you get this:</p>

<p align="center">
  <img src="/assets/embroidery/7.png" width="full" />
</p>

<p>This is really fun to watch, but I think the turtle could be made smarter.</p>

<h2 id="behavior">Behavior</h2>

<p>I’m first noticing that the turtle will get stuck going over the same area over and over; even as that part of the image gets painted lighter and lighter, it can’t find its way out of the region it’s painting. To keep it moving around the canvas, I added a slight bias in the forward direction. I tried just narrowing the range of possible directions, but found that it would just wander off the page if I did this — sometimes it really needs to turn.</p>

<p>The bias is a value added to the sampled brightness value, causing some samples to be less appealing to the turtle. I used a simple cosine function to have this bias peak when facing backwards and drop to zero at the middle sample facing forward.</p>

<p>Rather than being a constant value, it actually represents a proportion of the difference between the sampled brightness and absolute white.</p>

<p>First we need a normalized cosine wave that peaks at 1 on the first and last sample:</p>

<p>$$ b = \frac{1}{2}\cdot\left(\cos\left(2\pi\cdot\frac{\text{current sample}}{\text{total samples}}\right)+1\right) $$</p>

<p>This is then multiplied by the difference and a bias parameter $k$ between 0 and 1.</p>

<p>$$ \text{new reading} = \text{reading} + \left(b\cdot(255 - \text{reading})\cdot k\right) $$</p>

<p>$k$ doesnt have to be that high, as it turns out; $k=0.1$ will cross at most 10% of the gap between the reading and full white, but a strong behavior change can already be seen:</p>

<div class="video-mask" style="max-width: 90%; margin-left: 5%;">
  <video src="/assets/embroidery/2.mp4" autoplay="" loop="" muted=""></video>
</div>

<p>20,000 steps later, we have much better dynamic range and accurate shading:</p>

<p align="center">
  <img src="/assets/embroidery/8.png" width="full" />
</p>

<p>My next idea was to change the step size depending on direction. This simulates deceleration; the turtle has to slow down to make a turn. Hopefully this lets it scribble in detailed areas more finely without slowing it down elsewhere.</p>

<p align="center">
  <img src="/assets/embroidery/2.png" width="full" />
</p>

<p>This seems to have worked! Now we have good details to go along with our color accuracy. Shorter stitches cover less area though, so it took about 25,000 stitches to get a similar result to before.</p>

<p align="center">
  <img src="/assets/embroidery/9.png" width="full" />
</p>

<h2 id="contours">Contours</h2>

<p>Now I’m wondering if we can make it look not so…tangled. Adding slight biases to the otherwise unpredictable behavior seemed to get results without compromising the stochastic magic that makes this work. So let’s try nudging the turtle to follow contour lines.</p>

<p>We need to make a flow field from the image, and allow it to exert some amount of pull on the turtle.</p>]]></content><author><name></name></author><category term="articles" /><summary type="html"><![CDATA[Getting to work with an embroidery machine is a deep lesson in working within a limited creative space. Its main constraints are color and continuity; changing threads is a pain and not something you want to do often. It can cut threads on its own, but this takes time and leaves loose ends than all need to be trimmed.]]></summary></entry><entry><title type="html">Digital Impressionism</title><link href="http://localhost:4000/digital-impressionism/" rel="alternate" type="text/html" title="Digital Impressionism" /><published>2023-12-13T14:29:27-08:00</published><updated>2023-12-13T14:29:27-08:00</updated><id>http://localhost:4000/digital-impressionism</id><content type="html" xml:base="http://localhost:4000/digital-impressionism/"><![CDATA[]]></content><author><name></name></author><category term="articles" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Indigo</title><link href="http://localhost:4000/indigo/" rel="alternate" type="text/html" title="Indigo" /><published>2023-10-31T15:29:27-07:00</published><updated>2023-10-31T15:29:27-07:00</updated><id>http://localhost:4000/indigo</id><content type="html" xml:base="http://localhost:4000/indigo/"><![CDATA[<p align="center">
  <img src="/assets/indigo/2.png" width="full" />
</p>

<p>This past spring, I had the opportunity to take an intensive class on dyeing with indigo. For two weeks, I lived in the mountains of Japan with 9 other students, staying with our teacher Bryan in a 150-year-old farmhouse. I was quite an outsider in this group — all but one of my classmates were in the fashion industry. I was only there to take my aunt’s place in the class, and came in with zero prior experience in dyeing. Because of this, I’m especially proud of what I was able to accomplish in my two weeks there.</p>

<p align="center">
  <img src="/assets/indigo/3.png" width="full" />
</p>

<p>Indigo is fascinating to work with. It makes a mechanical bond with the fabric instead of a chemical bond like most dyes; this is what allows it to gradually fall off and create the fade patterns seen in denim. The mechanical bond is formed when oxygen joins loose dye molecules together into chains that affix themselves to the fibers.</p>

<p align="center">
  <img src="/assets/indigo/1.png" width="full" />
</p>

<p>In its unoxidized state, indigo is green. We would dip fabric into vats of de-oxidized indigo. They came out green and we hung them out not to dry, but to oxidize. In the breeze they turned to that familiar blue, and we dipped them again.</p>

<p>After five dips or so, we had to remove all the loose dye that had not attached to the fabric. You can wring and rinse a lot of it out, but only impact will get the last of it. Down the road from the farmhouse, a creek ran through the quiet village. We walked down to the creek, descented a set of rungs, and beat the fabric against the rocks until no more streaks of blue joined the gentle flow.</p>

<p align="center">
  <img src="/assets/indigo/24.png" width="full" />
</p>

<p>After hanging the pieces out to dry, we went inside to drink plum moonshine and work on our sewing. Nothing is made quickly this way, and that was just fine.</p>

<h2 id="katazome">Katazome</h2>

<p>In addition to better-known dye resist techniques such as <em>shibori</em>, we learned how to apply a rice paste onto the fabric to block the indigo, a method known as <em>katazome</em>. Stencils are made out of a durable paper with a thin mesh backing.</p>

<p align="center">
  <img src="/assets/indigo/25.png" width="full" />
</p>
<figcaption>
    An antique katazome piece. The stencil was made with a hole punch and a lot of time.
</figcaption>
<p></p>

<p>It pained me to think of everything I could do with this method if I had access to a laser cutter or even just a desktop vinyl cutter. But my tools were on the other side of the Pacific, and the nearest public makerspace was hundreds of miles away. Everything I had access to in the farmhouse was analog — even the sewing was done by hand.</p>

<h2 id="digital-art">Digital Art</h2>
<p>Can you make digital art with only your hands? I’ve always thought so; to me “digital” doesn’t refer to computers or machines of any kind, but to a discrete space as opposed to a continuous one. This space can be a tapestry with a woven design — the creative choices are made from a finite set of options: which thread passes over the others, which color appears on each square of the woven grid.</p>

<p align="center">
  <img src="/assets/indigo/26.png" width="full" />
</p>
<figcaption>
    This woven basket is an example of digital art to me.
</figcaption>
<p></p>

<p>I’d like to think that I don’t need any of my machines, or even my computer, to make the kind of digital art that I do. I got to take a step in that direction here.</p>

<h2 id="the-system">The System</h2>

<p>Against the advice of our teacher, I wanted to make a design with 6 different shades of indigo. This would require the stenciling process to be repeated five times. And I wanted the design to be large, of course. Using up five large sheets of <em>katazome</em> paper was out of the question, so I made a system that used one modular stencil to transfer a digital design.</p>

<p align="center">
  <img src="/assets/indigo/6.png" width="full" />
</p>

<p>With a ruler and a craft knife, I cut ten stripes and an alignment window into my piece of <em>katazome</em> paper. Then I found a grease pencil and used it to complete the 5mm grid. The eleventh stripe is a window for alignment — It lines up with these little corners I sewed into the fabric with polyester thread that won’t take on the indigo.</p>

<p align="center">
  <img src="/assets/indigo/29.png" width="full" />
</p>

<p>I wrote a Processing sketch that digitized the image in two ways: First it was posterized into 6 shades of blue, then each layer was pixelated into a striped grid. Each of the 12 sections of this grid, outlined in yellow, corresponded to the stencil. This way I could precisely transfer the design by hand.</p>

<div class="video-mask" style="max-width: 90%; margin-left: 5%">
  <video src="/assets/indigo/1.mp4" autoplay="" loop="" muted=""></video>
</div>

<h2 id="the-work">The Work</h2>

<p align="center">
  <img src="/assets/indigo/17.png" width="full" />
</p>

<p>Here’s what one layer looks like:</p>

<ol>
  <li>
    <p>Iron the fabric</p>
  </li>
  <li>
    <p>Align the stencil with a pair of locating stitches on the fabric</p>
  </li>
  <li>
    <p>Apply paste to the squares shown by the program</p>
  </li>
  <li>
    <p>Do this 11 more times</p>
  </li>
  <li>
    <p>Hang up the fabric to let the paste dry</p>
  </li>
  <li>
    <p>Dip the fabric in the indigo vat and let it oxidize for 5 minutes</p>
  </li>
  <li>
    <p>Rinse off the excess indigo. Watch the paste you spent hours applying flake off and disintegrate</p>
  </li>
  <li>
    <p>Walk down to the river and beat the rest of the indigo out onto the rocks</p>
  </li>
  <li>
    <p>Hang up the fabric to dry. Try to eat something while you’re waiting</p>
  </li>
</ol>

<p>For three days, I started working when I woke up and stopped only to go to bed. If I worked diligently, I could repeat this cycle twice in such a 16-hour workday. I’m glad I didn’t know what I was in for when I started. The first results were exciting enough to keep me going.</p>

<p>Rather than finding a way to skip some hard work through automation, I had the computer give me more work than I could have imagined. And it was worth it.</p>

<h2 id="result">Result</h2>

<p align="center">
  <img src="/assets/indigo/28.png" width="full" />
</p>

<p>I am happy to say that all I did to make this happen was worth it. I have one of the most unique pieces of art I’ve ever made: a piece that is plainly two things at once. You can immediately identify it as a digital design, and as a completely handmade piece. It is perhaps the most representative piece I’ve made; it shows how I wield my technical skills not as a replacement for labor, but as a challenge to do more with it.</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Group Classifier</title><link href="http://localhost:4000/group-classifier/" rel="alternate" type="text/html" title="Group Classifier" /><published>2023-03-20T15:29:27-07:00</published><updated>2023-03-20T15:29:27-07:00</updated><id>http://localhost:4000/group-classifier</id><content type="html" xml:base="http://localhost:4000/group-classifier/"><![CDATA[<p>This project began as a way of solving a very tedious problem on my abstract algebra final. You can view an interactive version of this iPython notebook on <a href="">Kaggle</a></p>

<h2 id="abelian-group-classifier">Abelian Group Classifier</h2>

<p><a href="https://en.wikipedia.org/wiki/Group_(mathematics)">Groups</a> are a fascinating branch of mathematics. Put simply, they consist of a set $G$ paired with some operator $*$, such that the set is closed under that operation. In other words,</p>

<div>
\begin{array}{c}\\ 
\text{If $a,b$ are in $G$, then $a*b$ is in $G$ as well.}
\\ \\\end{array}
</div>

<p>There are other requirements as well but this one, called <em>closure</em>, is perhaps the most defining. It gives groups their intricate internal structure — the unique way in which the elements relate to each other through $*$.</p>

<p>Let’s cover a little more notation and terminology, and then we can talk about what this classifier does.</p>
<h1 id="some-definitions">Some definitions</h1>

<ul>
  <li>The cyclic group $\mathbb{Z}_n$ or integers modulo $n$ is simply the set of numbers $\{0,1,2,\dots,n-1\}$ with the operation of addition. When two numbers add to a number larger than $n-1$, we simply “roll over” and start counting from 0. For example, in the group $\mathbb{Z}_5=\{0,1,2,3,4\}$ we have that $3+4=2$.</li>
  <li>The <strong>direct product</strong> of two groups $G,H$ is written $G\times H$ and is the group of ordered pairs $(g,h)$ where $g$ is in $G$ and $h$ is in $H$. For example,</li>
</ul>

<div>
\begin{array}{c}\\ \mathbb{Z}_2\times\mathbb{Z}_3 = \{(0,0),(0,1),(0,2),(1,0),(1,1),(1,2)\}\\ \\\end{array} 
</div>

<ul>
  <li>Note that we can have a direct product of more than two groups, e.g. $\mathbb{Z}_2\times\mathbb{Z}_3\times\mathbb{Z}_5\times\mathbb{Z}_5\times\mathbb{Z}_7$. Also note that the <em>order</em> or size of a direct product is simply the product of the orders of its constituent groups, so $\mathbb{Z}_2\times\mathbb{Z}_3$ would have order 6.</li>
  <li>An <strong>abelian</strong> group is one in which the operation is commutative, i.e. $a \ast b = b \ast a$.</li>
  <li>An <strong>isomorphism</strong> is a one-to-one function $f:G\to H$ between two groups that preserves the group structure, which is to say that $f(a \ast b)=f(a) \ast f(b)$ in $H$ for $a,b$ in $G$. Two groups that can be linked by an isomorphism are <strong>isomorphic</strong> to each other, which is to say that they share the same internal structure.</li>
</ul>

<h1 id="not-all-groups-are-unlike">Not all groups are unlike</h1>

<p>This last concept is especially important because groups can contain many different types of elements. The elements can be numbers, functions, movements, or <a href="https://en.wikipedia.org/wiki/Rubik%27s_Cube_group">positions of a Rubik’s Cube</a>. But many of them will be isomorphic to each other, and thus share the same structure even if their elements look different from each other.</p>

<p>For example, if we define the function $f:\mathbb{Z}_2\times\mathbb{Z}_3\to\mathbb{Z}_6$ as</p>

<div>
\begin{align}
    (0&amp;,0) &amp; (0&amp;,1) &amp; (0&amp;,2) &amp; (1&amp;,0) &amp; (1&amp;,1) &amp; (1&amp;,2)\\
    &amp;\downarrow &amp;&amp;\downarrow &amp;&amp;\downarrow &amp;&amp;\downarrow &amp;&amp;\downarrow &amp;&amp;\downarrow\\
    &amp;\ 0 &amp;&amp;\ 4 &amp;&amp;\ 2 &amp;&amp;\ 3 &amp;&amp;\ 1 &amp;&amp;\ 5
\end{align}
</div>

<p>we see that this forms an isomorphism — for example, $f((1,0)+(1,2))=f((0,2))=2=3+5=f((1,0))+f((1,2))$.</p>

<p>This gives us a sense in which $\mathbb{Z}_2\times\mathbb{Z}_3$ and $\mathbb{Z}_6$ <em>are the same group</em>, because despite looking different, they share the same underlying structure. This structure can be considered the “fingerprint” of that group, and we consider groups to be meaningfully different only if they have different “fingerprints”, i.e. they cannot be linked by an isomorphism.</p>

<h1 id="the-fundamental-theorem-of-finite-abelian-groups">The Fundamental Theorem of Finite Abelian Groups</h1>
<p>Given the premise that some groups can be represented as other groups through isomorphism, we can explore a theorem worthy of its title:</p>

<p><strong><em>Every</em></strong> <strong>finite abelian group can be uniquely represented as the direct product of cyclic groups $\mathbb{Z}_{p^i}$ , where each $p^i$ is a power of some prime number $p$.</strong></p>

<p>With this result, we’ve been handed the power to know <em>every</em> abelian group of a given order (size), using the prime factorization of that order. For example, we can factorize 36 as $2^2\cdot 3^2$, giving us four unique ways to write 36:</p>
<center>$36 = 2\cdot 2\cdot 3\cdot 3 = 2\cdot 2\cdot 3^2 = 2^2\cdot 3\cdot 3 = 2^2\cdot 3^2$ </center>
<p>These correspond to the four unique abelian groups of order 36:</p>
<center>$\mathbb{Z}_2\times\mathbb{Z}_2\times\mathbb{Z}_3\times\mathbb{Z}_3
\qquad \mathbb{Z}_2\times\mathbb{Z}_2\times\mathbb{Z}_9
\qquad \mathbb{Z}_4\times\mathbb{Z}_3\times\mathbb{Z}_3
\qquad \mathbb{Z}_4\times\mathbb{Z}_9$</center>

<p>And that’s it! That’s all of them. Any abelian group of order 36, whether it be made of numbers, functions, configurations of a puzzle, or colors, will be isomorphic to one of these four. We’ve successfully classified every abelian group of this order. This is precisely what this project sets out to do: list all abelian groups of a given order.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">4860</span>
</code></pre></div></div>

<p>So let’s go ahead and pick an order! I’ve set it to one that gives a nice result, but you can set $n$ to be any whole number between 1 and infinity. You’d be surprised by how many orders only have one unique abelian group associated with them.</p>

<p>Finding the prime factors of $n$ is easy enough to do with a simple iterative algorithm:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="nf">abs</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>  <span class="c1"># Just in case you cheated
</span>
<span class="k">def</span> <span class="nf">prime_factors</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
    <span class="n">divisor</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">factors</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">while</span> <span class="n">divisor</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">number</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="n">divisor</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">factors</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">divisor</span><span class="p">)</span>
            <span class="n">number</span> <span class="o">//=</span> <span class="n">divisor</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">divisor</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">factors</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">factors</span>

<span class="n">factorization</span> <span class="o">=</span> <span class="nf">prime_factors</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">factorization</span><span class="p">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">[2, 2, 3, 3, 3, 3, 3, 5]</code></p>

<p>For $n=36$ this would return the list <code class="language-plaintext highlighter-rouge">[2, 2, 3, 3]</code>. But we want to know the powers of each unique factor, both to reflect the compact notation $2^2\cdot 3^2$ and to help us find all four ways of writing 36.</p>

<p>We can do this using <code class="language-plaintext highlighter-rouge">numpy.unique</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">primes</span><span class="p">,</span> <span class="n">powers</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="n">factorization</span><span class="p">,</span> <span class="n">return_counts</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">size</span> <span class="o">=</span> <span class="n">powers</span><span class="p">.</span><span class="nf">max</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="n">primes</span><span class="p">,</span> <span class="n">powers</span><span class="p">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">[2 3 5] [2 5 1]</code></p>

<p>For $n=36$ this would return the array of unique primes <code class="language-plaintext highlighter-rouge">[2 3]</code> with their associated powers <code class="language-plaintext highlighter-rouge">[2 2]</code></p>

<p>Now we need the partitions of each power: the unique ways of writing it as a sum of other numbers. For example, the five unique partitions of 4 are</p>
<center>$1+1+1+1 = 1+1+2 = 2+2 = 1+3 = 4$</center>
<p>These correspond to the five unique ways of writing 81, or $3^4$:</p>
<center>$3\cdot 3\cdot 3\cdot 3 = 3\cdot 3\cdot 3^2 = 3^2\cdot 3^2 = 3\cdot 3^3 = 3^4$</center>
<p>After taking a number’s prime factorization, the unique ways of writing it are given by combinations of the partitions of the primes’ powers.</p>

<p>We find these partitions using a recursive algorithm which picks the rightmost number, subtracts it from the total, then uses itself to partition the remaining difference. It also helpfully formats the partition as a sorted array of desired length:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">partitions_oflength</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)]</span>
    
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># Create the trivial partition (all ones)
</span>    <span class="n">ones</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">ones</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">ones</span><span class="p">[:</span><span class="o">-</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ones</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="c1"># Create the partitions that end with j by
</span>        <span class="c1"># appending to the partitions of n - j
</span>        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="nf">partitions_oflength</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">j</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">p</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">:</span>    <span class="c1"># Keep it sorted to avoid duplicates
</span>                <span class="n">entry</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
                <span class="n">entry</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span>        <span class="c1"># j at the end
</span>                <span class="n">entry</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>   <span class="c1"># p before it
</span>                <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="nf">print</span><span class="p">(</span><span class="o">*</span><span class="nf">partitions_oflength</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">7</span><span class="p">),</span> <span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>  <span class="c1"># Example
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0 0 0 1 1 1 1]
[0 0 0 0 1 1 2]
[0 0 0 0 0 2 2]
[0 0 0 0 0 1 3]
[0 0 0 0 0 0 4]
</code></pre></div></div>

<p>Now we just have to make those combinations. We use another recursive algorithm to do this, that makes its way through the list of powers and returns all possible combinations of their respective partitions:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">combos_oflength</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">header</span> <span class="o">=</span> <span class="nf">partitions_oflength</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">length</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">P</span><span class="p">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">header</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">header</span><span class="p">:</span>
        <span class="c1"># For each partition of the first
</span>        <span class="c1"># given power, add it to the combinations
</span>        <span class="c1"># of all the following powers
</span>        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">combos_oflength</span><span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">length</span><span class="p">):</span>
            <span class="n">new_combo</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">vstack</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
            <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">new_combo</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">combos</span><span class="p">(</span><span class="n">P</span><span class="p">):</span>
    <span class="c1"># Pass the largest power to set
</span>    <span class="c1"># the width of each row
</span>    <span class="n">length</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="nf">max</span><span class="p">()</span>
    <span class="k">return</span> <span class="nf">combos_oflength</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
    
<span class="n">partition_combos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="nf">combos</span><span class="p">(</span><span class="n">powers</span><span class="p">))</span>

<span class="c1"># Display some of the combinations
</span><span class="n">n_displayed</span> <span class="o">=</span> <span class="mi">28</span><span class="o">//</span><span class="n">partition_combos</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="s">'Some of the power combinations:</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">rows</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="nf">rollaxis</span><span class="p">(</span><span class="n">partition_combos</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="o">*</span><span class="n">rows</span><span class="p">[:</span><span class="n">n_displayed</span><span class="p">],</span> <span class="n">sep</span><span class="o">=</span><span class="s">'   '</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Some of the power combinations:

[0 0 0 1 1]   [0 0 0 1 1]   [0 0 0 1 1]   [0 0 0 1 1]   [0 0 0 1 1]
[1 1 1 1 1]   [0 1 1 1 2]   [0 0 1 2 2]   [0 0 1 1 3]   [0 0 0 2 3]
[0 0 0 0 1]   [0 0 0 0 1]   [0 0 0 0 1]   [0 0 0 0 1]   [0 0 0 0 1]
</code></pre></div></div>
<p>For $n=36$ this would return the four possible combinations of the partitions of 2 and 2:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 1]    [1 1]    [0 2]    [0 2]
[1 1]    [0 2]    [1 1]    [0 2]
</code></pre></div></div>
<p>As a reminder, these correspond to the four representations</p>

<p>\begin{array}{cccc}
    2\cdot 2\cdot 3\cdot 3\qquad &amp; 2\cdot 2\cdot 3^2\qquad &amp; 2^2\cdot 3\cdot 3\qquad &amp; 2^2\cdot 3^2
\end{array}</p>

<p>This should be all we need to classify our groups. However, there’s one more thing we need to consider.</p>

<h1 id="surprise-another-theorem">Surprise! Another theorem</h1>
<p>More of a lemma, really. This one’s pretty simple:</p>

<p><strong>If two numbers $m,k$ are coprime, meaning that no number greater than 1 divides them both, then $\mathbb{Z}_m\times\mathbb{Z}_k$ is isomorphic to (meaning, functionally the same group as) $\mathbb{Z}_{mk}$.</strong></p>

<p>This really complicates our task. It means that the groups <center>$\mathbb{Z}_2\times\mathbb{Z}_2\times\mathbb{Z}_3\times\mathbb{Z}_3
\qquad \mathbb{Z}_2\times\mathbb{Z}_2\times\mathbb{Z}_9
\qquad \mathbb{Z}_4\times\mathbb{Z}_3\times\mathbb{Z}_3
\qquad \mathbb{Z}_4\times\mathbb{Z}_9$</center>
which are quite easy to come up with, are actually</p>
<center>$\mathbb{Z}_6\times\mathbb{Z}_6
\qquad \mathbb{Z}_2\times\mathbb{Z}_{18}
\qquad \mathbb{Z}_3\times\mathbb{Z}_{12}
\qquad \mathbb{Z}_{36}$</center>

<p>It means that after we’ve found our groups, we have to <em>condense</em> them until their constituents all share a common divisor. We do this by turning their <em>elementary divisors</em>, e.g. $2^2,3,3$ into <em>invariant factors</em> e.g. $3,12$.</p>

<p>The invariant factors have the property that when sorted from least to greatest, each number divides the number after it. They also provide a unique representation of the group: each set of elementary divisors is associated with one and only one set of invariant factors.</p>

<h1 id="one-more-algorithm">One more algorithm</h1>

<p>To find the invariant factors, we have an interesting algorithm which exploits the fact that for <em>distinct</em> primes $p_1,p_2,…,p_i$ which make the product $n=p_1^{n_1}p_2^{n_2}\cdots p_i^{n_i}$, the group $\mathbb{Z}_{p_1^{n_1}}\times\cdots\times\mathbb{Z}_{p_i^{n_i}}$ is isomorphic to $\mathbb{Z}_n$ (this result follows from the theorem we just introduced).</p>

<p>Consider the group</p>
<center>$\mathbb{Z}_2\times\mathbb{Z}_2\times\mathbb{Z}_4\times\mathbb{Z}_8\times\mathbb{Z}_3\times\mathbb{Z}_3\times\mathbb{Z}_3\times\mathbb{Z}_5\times\mathbb{Z}_{25}$</center>

<p>we can condense this group by making a table with a row for each prime, thus separating any duplicates:</p>

<div>
\begin{array}{llll}
   2\ \ &amp; 2\ \ &amp; 2^2 &amp; 2^3\\
     &amp; 3 &amp; 3 &amp; 3\\
     &amp;   &amp; 5 &amp; 5^2
\end{array}
</div>

<p>Then we can take the product of each column, which will have the combination of distinct prime powers we’re looking for. By arranging them left-to-right by size, we also guarantee that each product will divide the next. In this example, we get the invariant factors 2, 6, 60, and 600, so our group is</p>

<center>$\mathbb{Z}_2\times\mathbb{Z}_6\times\mathbb{Z}_{60}\times\mathbb{Z}_{600}$</center>
<p>Once we have a combination of powers we’d like to condense, we can create the table and multiply the columns in just two lines using NumPy. Or more accurately, we can do this for every combination at once:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">primes</span><span class="p">[:,</span><span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">],</span><span class="n">size</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="n">divisor_tables</span> <span class="o">=</span> <span class="n">X</span><span class="o">**</span><span class="n">partition_combos</span>  <span class="c1"># Broadcasting!
</span>
<span class="c1"># Flatten all the tables at once by picking the right axis
</span><span class="n">factor_lists</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">prod</span><span class="p">(</span><span class="n">divisor_tables</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>Now we just need to display all our hard work. We could do this by creating a DataFrame in Pandas, but LaTeX always looks best:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">IPython.display</span> <span class="kn">import</span> <span class="n">Latex</span>

<span class="c1"># Set up the table in LaTeX
</span><span class="n">output</span> <span class="o">=</span> <span class="sa">r</span><span class="s">'$\text{'</span> <span class="o">+</span> <span class="sa">f</span><span class="s">'Groups of order '</span> <span class="o">+</span> <span class="sa">r</span><span class="s">'}'</span> <span class="o">+</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">$:</span><span class="se">\n</span><span class="s">'</span>
<span class="n">output</span> <span class="o">+=</span> <span class="sa">r</span><span class="s">'''
\begin{array}{l|l|l}
    \text{Elementary Divisors} &amp; \text{Invariant Factors} &amp; \text{Isomorphic Group}\\
    \hline'''</span>

<span class="c1"># Create the entries by piecing together some strings
</span><span class="k">for</span> <span class="n">combo</span><span class="p">,</span> <span class="n">factor_list</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">partition_combos</span><span class="p">,</span> <span class="n">factor_lists</span><span class="p">):</span>
    <span class="n">divisors</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">for</span> <span class="n">divisor</span><span class="p">,</span> <span class="n">power</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">combo</span><span class="p">.</span><span class="nf">flatten</span><span class="p">()):</span>
        <span class="k">if</span> <span class="n">power</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">divisors</span> <span class="o">+=</span> <span class="s">','</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">divisor</span><span class="p">.</span><span class="nf">item</span><span class="p">())</span>
            <span class="k">if</span> <span class="n">power</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">divisors</span> <span class="o">+=</span> <span class="s">'^'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">power</span><span class="p">.</span><span class="nf">item</span><span class="p">())</span>
    <span class="n">output</span> <span class="o">+=</span> <span class="s">'</span><span class="se">\n</span><span class="s">    '</span> <span class="o">+</span> <span class="n">divisors</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
    
    <span class="n">factors</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">group</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">factor_list</span><span class="p">[</span><span class="n">factor_list</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">]:</span>
        <span class="n">factors</span> <span class="o">+=</span> <span class="nf">str</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">item</span><span class="p">())</span> <span class="o">+</span> <span class="s">','</span>
        <span class="n">group</span> <span class="o">+=</span> <span class="sa">r</span><span class="s">'\mathbb{Z}_{'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">item</span><span class="p">())</span> <span class="o">+</span> <span class="sa">r</span><span class="s">'}\times'</span>
    
    <span class="n">output</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">' &amp; </span><span class="si">{</span><span class="n">factors</span><span class="p">[</span><span class="si">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s"> &amp; </span><span class="si">{</span><span class="n">group</span><span class="p">[</span><span class="si">:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="si">}</span><span class="s">'</span> <span class="o">+</span> <span class="sa">r</span><span class="s">'\\'</span>

<span class="n">output</span> <span class="o">+=</span> <span class="sa">r</span><span class="s">'''
\end{array}'''</span>

<span class="nc">Latex</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</code></pre></div></div>

<div>
    <img src="/assets/group-classifier/1.png" />
</div>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[This project began as a way of solving a very tedious problem on my abstract algebra final. You can view an interactive version of this iPython notebook on Kaggle]]></summary></entry><entry><title type="html">Mosaic</title><link href="http://localhost:4000/mosaic/" rel="alternate" type="text/html" title="Mosaic" /><published>2023-03-20T15:29:27-07:00</published><updated>2023-03-20T15:29:27-07:00</updated><id>http://localhost:4000/mosaic</id><content type="html" xml:base="http://localhost:4000/mosaic/"><![CDATA[<p align="center">
    <img src="/assets/mosaic/2.png" />
    <img src="/assets/mosaic/1.png" />
</p>

<p>This is one of my rare software-only projects. The published form is actually an <a href="https://www.instagram.com/ar/804390247877532">Instagram filter</a> you can try for yourself!</p>

<p>Most of my programs can’t be experienced this way; to make a stable, fast live video effect that can run on any smartphone you need to use shader code. It’s difficult but rewarding to learn — you have to “invert” your point of view from an omniscient CPU to an anonymous, lost GPU thread that can only poke at its own surroundings. The most basic shapes and patterns are made in a completely different way than you would make them with a tool like Processing.</p>

<h2 id="the-challenge">The Challenge</h2>

<p>I wanted to challenge myself by creating an impressionistic, painterly style. This is very easy to do using traditional CPU code — I even did it in <a href="/matlab-painting/">MATLAB</a>! It’s a major challenge in shader code for the same reason it’s so easy everywhere else — Impressionism lends itself to stochastic processes, procedural layering of brushstrokes to gradually build up an image. You can’t do that with real-time graphics, so you have to fake it.</p>

<p>As this project stands, it looks like a mosaic of colored tiles. I can’t think of a painter that painted like this, and it still feels very “content-unaware”. The one way in which it is content-aware is the interesting and difficult part of this project.</p>

<h2 id="voronoi">Voronoi</h2>

<p><a href="thebookofshaders.com">The Book of Shaders</a> has a great page on cellular noise, and drawing large Voronoi diagrams in GLSL. Instead of evaluating all the points, which becomes computationally expensive very quickly, their code subdivides the domain into a grid and only evaluates within the nine grid squares surrounding each texture coordinate.</p>

<p>What it’s evaluating are the points that each square generates. While this pattern looks fairly random, if you look closely you can see that each grid square has exactly one point making an elliptical orbit around its center:</p>

<div class="video-mask" style="max-width: 90%; margin-left: 5%;">
    <video src="/assets/mosaic/1.mp4" autoplay="" loop="" muted=""></video>
</div>

<p>It’s relatively easy to make a colored Voronoi diagram from here: just sample the camera input at each point, then paint its cell that color. This looks kind of cool, but I think we can do something cooler. I want to depopulate areas of low detail so they have bigger cells. This feels closer to something a painter would do.</p>

<h2 id="awareness">Awareness</h2>

<p>A detail map is easy enough to make with edge detection kernels. I might use Difference of Gaussians later, but a simple blurred edge map works just fine. From there I started with quadtree compression:</p>

<p align="center">
    <img src="/assets/mosaic/4.png" />
</p>
<figcaption>
    This turned out to be the only image I have from this stage of development, so enjoy my gray forehead.
</figcaption>
<p></p>

<p>This program starts with the smallest tile size and builds up. Depending on what level of detail is under each tile, it can either color itself uniquely or join the larger tile it is a part of. I like this backwards approach over the more typical subdividing, because it allows for a cleaner separation of high- and low-detail areas instead of splitting up regions unnecessarily.</p>

<p>To make the Voronoi diagram, I have each uniquely colored tile generate a point. But correctly finding the closest point to each pixel isn’t that easy; if the pixel is in a larger tile, its closest point can be in a smaller non-adjacent tile that is difficult to find without a broad search. I thought it would suffice to look at the eight surrounding small tiles like in the regular Voronoi algorithm, find what larger tile each one belongs to, if any, and then check the point generated by that one.</p>

<p>It turned out that I had to check 80 tiles in a 9x9 square, a little over the size of the largest tiles, in order to completely avoid errors. This was a bit disappointing; I hoped the quadtree would be an efficient solution but it seems that bruteforcing is still necessary, and the quadtree only serves to allocate the points. With that in mind, I started thinking of simpler ways to allocate them. I also wanted something that looked more organic — the square grid is distorted but you can still kind of tell it’s there, especially when compared to a Voronoi diagram that’s been relaxed via <a href="https://en.wikipedia.org/wiki/Lloyd%27s_algorithm">Lloyd’s Algorithm</a>.</p>

<h2 id="dithering">Dithering</h2>

<p>I tried applying an approach based on dithering, with each square randomly picking a threshold and activating its point if the detail map passes that threshold at the point. This turned out not to produce the uniformity I needed; in low-detail areas the dots would clump up rather than being scattered evenly. Random dithering dates back to at least 1951, and I can see why it wasn’t widely adopted.</p>

<p>Ordered dithering with a matrix looks better, but it does just make a grid pattern again. I tried adding a twist: rotating the matrices to break up repetition. Keeping the even distribution requires the matrices and their rotations to be designed with intention.</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Lampshades</title><link href="http://localhost:4000/lampshades/" rel="alternate" type="text/html" title="Lampshades" /><published>2023-03-20T15:29:27-07:00</published><updated>2023-03-20T15:29:27-07:00</updated><id>http://localhost:4000/lampshades</id><content type="html" xml:base="http://localhost:4000/lampshades/"><![CDATA[<h2 id="laser-origami">Laser Origami</h2>

<p>You can tell a roll of tape has been within my reach if you see these scattered around:</p>

<p>[picture of accordioned tape]</p>

<p>I thought an pleated pattern like this could make for a cool lampshade, and I wanted to do some experimentation with laser-creased origami. I made a pendant lamp for my apartment using this method a while ago:</p>

<p align="center">
    <img src="/assets/lampshades/2.png" />
</p>

<p>It’s made from 30 individual segments, each one pre-cut and creased by a laser. These 20-point stars are hard enough to assemble, so I was glad that I also didn’t have to do as much work on the folding. Vector engraving the creases also let me use heavy art paper, which is normally very unsuitable for origami and can’t be creased very well by hand.</p>

<h2 id="design">Design</h2>

<p>I wanted to make curcular lampshades with the same pleated pattern, and a series of cascading terraces like this:</p>

<p align="center">
    <img src="/assets/lampshades/1.png" />
</p>

<p>This design only has a few parameters: The number of terraces, the angle at which they separate from each other, and the distance between folds. Manually defining these values, however, would tell you very little about what the final profile will look like. So I made an editor that prioritizes this profile and lets the user tune it using bezier curves:</p>

<div class="video-mask" style="max-width: 90%; margin-left: 5%; border-radius: 5px;">
  <video src="/assets/lampshades/1.mp4" autoplay="" loop="" muted=""></video>
</div>

<p>The number of terraces can be changed, and you can slide folds along the curve and the underside of each terrace to achieve the final profile:</p>

<div class="video-mask" style="max-width: 90%; margin-left: 5%; border-radius: 5px;">
  <video src="/assets/lampshades/2.mp4" autoplay="" loop="" muted=""></video>
</div>

<p>On the right you can see a readout that gives the height of this final profile as a percentage of the paper height. Since the design will be made on a laser cutter with a limited working area, its final size is constrained by that working area. More terraces with longer underside segments means more paper, and since there’s a limit to how much paper you can fit, this really just means the final piece will be smaller.</p>

<h2 id="export">Export</h2>

<p>There’s also a built-in export interface which color-codes the pattern for different power levels from the laser. Creating this design isn’t entirely trivial; segments of the profile can’t be measured absolutely but instead must be measured relative to the total length of all segments. This is calculated during the design process to give the height percentage.</p>

<p>The edge of each terrace is a doubled-back fold that just looks like a straight horizontal line on the net. But the folds at the top of each terrace, hidden under the previous one, need to have a V-shape at half the angle desired.</p>

<p>Note that this only gives the desired profile when the folds are squished flat; The angles will increase causing the entire piece to curl the more it is stretched. I haven’t figured out how to account for this stretch as a parameter since it’s changing constantly as the piece is manipulated. Perhaps a circumference value could give the amount of stretch.</p>

<p>I chose two parameters to be used during export, aspect ratio and number of pleats. These will determine what your piece ends up looking like. If you want a smaller piece with a lot of pleats, you can increase the aspect ratio. If you want to make a larger shade out of multiple segments, you can reduce these parameters and get a longer design that fits sideways on the paper:</p>

<div class="video-mask" style="max-width: 90%; margin-left: 5%; border-radius: 5px;">
  <video src="/assets/lampshades/3.mp4" autoplay="" loop="" muted=""></video>
</div>

<p>As a bonus, I added the ability to save these parameters as JSON files; each non-function key on the keyboard is assigned a different slot which you can call up by pressing it. Folders are automatically created, and exported SVG files are named with the pleat count and aspect ratio.</p>

<p>The source code for this tool is on GitHub. If you make something with it please send a picture!</p>]]></content><author><name></name></author><category term="projects" /><summary type="html"><![CDATA[Laser Origami]]></summary></entry></feed>